Half Adder Using NAND:


----------------------------------
verilog code:
----------------------------------

module nand_ha(
    input a,
    input b,
    output sum1,
    output carry1
    );
    wire w1, w2, w3,sum,carry;
    and n1(w1, a, b);
    and n2(w2, ~w1,a);
    and n3(w3, ~w1, b);
    and n4(sum, ~w2, ~w3);
    and n5(carry, ~w1);
    not n6(sum1,sum);
    not n7(carry1,carry);
    
endmodule

----------------------------------
Test Bench:
----------------------------------

module ha_nand_tb;
reg a, b;
wire sum1,carry1;

nand_ha uut(
.a(a), .b(b), .sum1(sum1), .carry1(carry1) );

initial begin
 a=0; b=0; #30;
 a=0; b=1; #30;
 a=1; b=0; #30;
 a=1; b=1; #30;
 end

endmodule


--------------------------------------------------------------------------------------------------------------------


DOWN COUNTER:

---------------------
main_code
---------------------



module counter1(
    clk, rst, clk_div, counter
);
    input clk, rst;
    inout clk_div;
    output[3:0] counter;
    
    reg[3:0] counter_up;
    reg[25:0] clk_cnt;
    
    always@(posedge clk) 
    begin 
        if (rst)
            clk_cnt <= 25'b0;
        else
            clk_cnt <= clk_cnt + 1;    
    end
    assign clk_div = clk_cnt[3];
    
    always @(posedge clk_div or posedge rst)
    begin
        if (rst)
            counter_up = 4'b1111;
        else
            counter_up = counter_up - 4'b1;     
    end
    assign counter = counter_up;

endmodule


--------------------------------------------------------------------
UP_COUNTER

---------------------
main code
--------------------




module counter1(
    clk, rst, clk_div, counter
);
    input clk, rst;
    inout clk_div;
    output[3:0] counter;
    
    reg[3:0] counter_up;
    reg[25:0] clk_cnt;
    
    always@(posedge clk) 
    begin 
        if (rst)
            clk_cnt <= 25'b0;
        else
            clk_cnt <= clk_cnt + 1;    
    end
    assign clk_div = clk_cnt[3];
    
    always @(posedge clk_div or posedge rst)
    begin
        if (rst)
            counter_up = 4'b0;
        else
            counter_up = counter_up + 4'b1;     
    end
    assign counter = counter_up;

endmodule



-----------------------------------------------------------------
Testbench
----------------------------------------------

module count_tb;
   reg clk, rst;
   wire[3:0] counter;
   wire clk_div;
   
   counter1 uut(
        .clk(clk),
        .counter(counter),
        .rst(rst),
        .clk_div(clk_div)
   );
   initial begin
        clk = 1;
        forever #10 clk = ~clk;
   end
   initial begin
    rst = 1;
    #20;
    rst = 0;
    #10000;
   end
   
endmodule


------------------------------------------------------

Counter with MUX
---------------------------------------------------------------
Main Code
----------------------------
module mux_clk_div(clk,rst,s0,s1,out,clkd1,clkd2,clkd3,clkd4);

input clk,rst,s0,s1;
inout clkd1, clkd2, clkd3, clkd4;

output reg out;


reg [25:0]div_cnt;

always@(posedge clk)
begin
    if(rst)
        div_cnt=25'b0;
    else
        div_cnt = div_cnt +1;
end

assign clkd1 = div_cnt[1];
assign clkd2 = div_cnt[2];
assign clkd3 = div_cnt[3];
assign clkd4 = div_cnt[4];

always@(posedge clk)
begin
    if(s0==0 && s1==0)
        out = clkd1;
        
    else if(s0==0 && s1==1)
        out = clkd2;
        
     else if(s0==1 && s1==0)
        out = clkd3;
        
      else if(s0==1 && s1==1)
        out = clkd4;
        
 end
     



endmodule


--------------------------------
TestBench
--------------------------------
module clk_mux_tb;
reg clk,rst,s0,s1;
wire out,clkd1,clkd2,clkd3,clkd4;

mux_clk_div uut(
.clk(clk),.rst(rst),.clkd1(clkd1),.clkd2(clkd2),.clkd3(clkd3),.clkd4(clkd4),.s0(s0),
.s1(s1),.out(out));

initial begin
    clk=0;
    forever #10 clk=~clk;
end

initial begin
    rst = 1; 
    #20;
    
    rst = 0;
    s0=0;s1=0;#100;
    s0=0;s1=1;#100;
    s0=1;s1=0;#100;
    s0=1;s1=1;#100;
    #1000;
    
  
    
    
end

endmodule

----------------------------------------------------------


----------------------------------------------------------

RAM
------------------------------------------------------


___________
MAIN CODE
-----------

module ram(
    wr, rd, add, ip, out, clk
    );
    input wr, rd, clk;
    input[3:0] ip;
    input[2:0] add;
    output[3:0] out;
    
    reg[3:0] ram[0:3];
    
    always @(posedge clk) 
    begin
        if (wr) 
            ram[add] <= ip;
    end
    assign out = rd?ram[add]:4'bzzzz;
  
endmodule



______________
TESTBENCH
--------------

module ram_tb;
    reg[3:0] ip;
    reg clk, wr, rd;
    reg[2:0] add;
    
    wire[3:0] out;
    ram uut(
        
        .ip(ip),
        .clk(clk),
        .wr(wr),
        .rd(rd),
        .add(add),
        .out(out)
    );
    
    initial begin 
        ip = 0;
        wr = 0;
        rd = 0;
        add = 0;

        
        ip = 4'b0000; wr = 1; rd = 0; add = 3'b000; #50;
        ip = 4'b0001; wr = 1; rd = 0; add = 3'b001; #50;
        ip = 4'b0010; wr = 1; rd = 0; add = 3'b010; #50;
        ip = 4'b0011; wr = 1; rd = 0; add = 3'b011; #50;
        
        wr = 0; rd = 1; add = 3'b000; #50;
        wr = 0; rd = 1; add = 3'b001; #50;
        wr = 0; rd = 1; add = 3'b010; #50;
        wr = 0; rd = 1; add = 3'b011; #50;
    
    end
    initial begin
        clk = 1;
        forever #25 clk = ~clk;
    end    
    
endmodule

----------------------------------------------------------


SWQUENCE DETECTOR MEALEY

----------------------------------------------------------

--------------------
MAIN CODE
--------------------

module seq(rst,clk,ip,op);

 output reg op;
  input clk, rst, ip;

  reg [2:0] state;
  reg [2:0] next_state;

  parameter [2:0] s0=3'b000;
  parameter [2:0] s1=3'b001;
  parameter [2:0] s2=3'b011;
 // parameter [2:0] s3=3'b011;
// parameter [2:0] s4=3'b100;
// parameter [2:0] s5=3'b101;

  always @(posedge clk, posedge rst)
  begin
  if (rst)
      state<=s0;
    else
      state<=next_state;
  end

  always @(state, ip)
  begin
   case(state)
  s0:
   if (ip)
      begin
        next_state<=s1;
        op<=1'b0;
      end
      else
      begin
        next_state<=s0;
        op<=1'b0;
      end
  
    s1:
      if (ip)
      begin
        next_state<=s2;
        op<=1'b0;
      end
      else
      begin
        next_state<=s0;
        op<=1'b0;
      end

    s2:
      if (ip)
      begin
        next_state<=s2;
        op<=1'b0;
      end
      else
      begin
        next_state<=s0;
        op<=1'b1;
      end
  
//    s3:
//      if (ip)
//      begin
//        next_state<=s1;
//        op<=1'b1;
//      end
//      else
//      begin
//        next_state<=s2;
//        op<=1'b0;
//      en;d
default:
      begin
              next_state<=s0;
              op<=1'b0;
      end
    endcase
  end
endmodule




--------------------------------------
TESTBENCH
______________________________________



module seq_tb;

 // Inputs
 reg rst;
 reg clk;
 reg ip;

 // Outputs
 wire op;

 // Instantiate the Unit Under Test (UUT)
 seq uut (
  .rst(rst), 
  .clk(clk), 
  .ip(ip), 
  .op(op)
 );

 initial begin
  // Initialize Inputs
  clk = 1;
  forever #10 clk=~clk;
  end
  
  initial begin
  // Initialize Inputs
  rst = 1;
   #20;
   rst = 0;
   #1000;
   
  end
  
  
  initial begin
  // Initialize Inputs
  ip = 1;
   #40;
   ip = 1;
   #20;
   ip = 1;
   #20;
   ip = 1;
   #20;
   ip = 1;
   #20;
   ip = 1;
   #20;
   ip = 1;
   #20;
   ip = 0;
   #20;
    ip = 1;
   #20;
   ip = 1;
   #20;
   ip = 0;
   #20;
   ip = 1;
   #20;
   
  

 end      
endmodule
--------------------------------------------------------------



--------------------------
ENCODER
__________________________


-------------
verilog
-------------

module encoder(
y0, y1, y2, y3, a0, a1
    );
    input y0, y1, y2, y3;
    output a0, a1;
   
    assign a0 = y3 | y1;
    assign a1 = y1 | y2;
endmodule


------------------------
TESTBENCH
-------------------------
module encoder_tb;
reg y0, y1, y2, y3;
wire a0, a1;

encoder uut(
.y0(y0), .y1(y1), .y2(y2), .y3(y3), .a0(a0), .a1(a1)
);
initial begin 
y0 = 1;
y1=0;
y2=0;
y3=0; #30
y1 = 1; 
y2 = 0; 
y3 = 0;
y0 = 0; #30;

y0 = 0; 
y1 = 0;
y2 = 1;
y3 = 0; #30;

y1 = 0; 
y2 = 0; 
y3 = 1;
y0 = 0;  #30;


end
endmodule


---------------------------------------------------------------------------------------------

____________________________________
DECODER
_____________________________________


-----------------------
VERILOG
----------------------
module decoder(
a, b, En, y1, y2, y3, y4
    );
    input a, b, En;
    output y1, y2, y3, y4;
    
    assign y1 = (~a) & (~b) & En;
    assign y2 = ~a & b & En;
    assign y3 = a & ~b & En;
    assign y4 = a & b & En;
 endmodule


------------------------
TESTBENCH
-------------------------

module decoder_tbb;
reg a, b, En;
wire y1, y2, y3, y4;

decoder uut(
.a(a), .b(b), .En(En), .y1(y1), .y2(y2), .y3(y3), .y4(y4)
);
initial begin 
En = 0; a = 0; b = 0; #30;
En = 1; 
a = 0; b = 0; #30;
a = 0; b = 1; #30;
a = 1; b = 0; #30;
a = 1; b = 1; #30;
end
endmodule


---------------------------------------------------------------------------------------------

____________________________________
COMPARATOR
_____________________________________


-----------------------
VERILOG
----------------------

module camparator(
    input  a,
    input  b,
    output reg y
    );
    always @(a or b)
    begin
    if(a==0 && b==0)
      y=1'b1;
     else if(a==0 && b==1)
      y=1'b0;
    else if(a==1 && b==0)
     y =1'b0;
    else
    y=1;
   end
endmodule

-----------------------
TESTBENCH
----------------------

module camparatortb;
 reg a,b;
 wire y;
 
 camparator uut(.a(a), .b(b), .y(y));
  
  initial begin
  a=0;
  b=0;#30;
  a=0;
  b=1;#30;
  a=1;
  b=0;#30;
  a=1;
  b=1;#30;
  
  end
endmodule


___________________________________________________________________________

HALF ADDER
----------------------------------------------------------

Half Adder
1) Data Flow Code:
module HA_143_151(
    input a,
    input b,
    output sum,
    output carry
    );
	 assign sum = a^b;
	 assign carry = a & b;


endmodule
2) Gate Level Code
module ha_143_151_GL(
    input a,
    input b,
    output sum,
    output carry
    );
	 xor u1(sum,a,b);
	 and u2(carry,a,b);


endmodule
3)Behavioral Code
module HA_143_151_behav(
    input a,
    input b,
    output sum,
    output carry
    );
	 reg sum,carry;
	 always @(a or b)
	 begin
	 if (a==0 && b==0)
	 begin
		sum = 0;
		carry = 0;
		end
	 else if (a==0 && b==1)
	 begin
		sum = 1;
		carry = 0;
		end
	else if (a==1 && b==0)
	 begin
		sum = 1;
		carry = 0;
		end
	else
	 begin
		sum = 0;
		carry = 1;
		end
	 end


endmodule

Test Bench Code:
module ha_tb_bevaor;

	// Inputs
	reg a;
	reg b;

	// Outputs
	wire sum;
	wire carry;

	// Instantiate the Unit Under Test (UUT)
	HA_143_151_behav uut (
		.a(a), 
		.b(b), 
		.sum(sum), 
		.carry(carry)
	);

	initial begin
		// Initialize Inputs
		a = 0;
		b = 0;
		#100; 		// Wait 100 ns for global reset to finish
        
		// Add stimulus here
		
		a = 0;
		b = 1;
		#100;
		
		a = 1;
		b = 0;
		#100;
		
		a = 1;
		b = 1;
		#100;
	end
      
endmodule

.ucf:

# PlanAhead Generated IO constraints 

NET "a" IOSTANDARD = LVCMOS33;
NET "b" IOSTANDARD = LVCMOS33;
NET "carry" IOSTANDARD = LVCMOS33;
NET "sum" IOSTANDARD = LVCMOS33;

# PlanAhead Generated physical constraints 

NET "a" LOC = U8;
NET "b" LOC = U9;
NET "carry" LOC = V9;
NET "sum" LOC = T8;


_________________________________________________________

___SR FLIP FLOP___________________________________________

module Lab3_SRFF_255_259(     // Amey Patil   Roll no - 255
    input s,                  // Ganesh Naik  Roll no.- 259
    input r,
    input clk,
    output reg q,
    output reg qb
    );
initial begin
	q = 1;
	qb = 0;
end

always @(posedge clk)
begin
	case({s,r})
		{0,0}:
		      begin
				    q=q;
					 qb=qb;
				end
		{0,1}:
		      begin
				    q=0;
					 qb=1;
				end
	   {1,0}:
		      begin
				    q=1;
					qb=0;
				end
		{1,1}:
		      begin
				    q=1'bx;
					qb=1'bx;
				end		
	endcase
end
endmodule


************testbench**********************



module tb_SRFF_255_259;         // Amey Patil   Roll no - 255
    // Inputs                   // Ganesh Naik  Roll no.- 259
	reg s;
	reg r;
	reg clk;

	// Outputs
	wire q;
	wire qb;

	// Instantiate the Unit Under Test (UUT)
	Lab3_SRFF_255_259 uut (
		.s(s), 
		.r(r), 
		.clk(clk), 
		.q(q), 
		.qb(qb)
	);

	initial begin
		// Initialize Inputs
		clk = 0;
		s = 0;
		r = 0;
		#10
		
		clk = 1;
		s = 0;
		r = 0;
		#10
		
		clk = 0;
		s = 0;
		r = 0;
		#10
		
		clk = 1;
		s = 0;
		r = 1;
		#10
		
		clk = 0;
		s = 1;
		r = 0;
		#10
		
		clk = 1;
		s = 1;
		r = 0;
		#10
		
		clk = 0;
		s = 1;
		r = 1;
		#10
		
		clk = 1;
		s = 1;
		r = 1;
	
		// Wait 100 ns for global reset to finish
		#100;
        
		// Add stimulus here

	end
endmodule

---------------------------------------------------------------------------------
D FLIP FLOP
----------------------------------
module D_ff(
    d, clk, rst, q
    );
    input d, clk, rst;
    output q;
    reg q; 
    
    always @(posedge clk or posedge rst) 
    begin 
        if (rst)
            q = 0;
           
        else
            q = d;    
    end
    
    
endmodule

------------
TB
_____________
module d_tb;
    reg d, clk, rst;
    wire q;
    D_ff uut(
        .d(d),
        .clk(clk),
        .q(q),
        .rst(rst)
    );

    initial begin
        clk = 1;
        rst = 1;
        d = 0;
        
        #60;
        
        rst = 0;
        d = 1;
        #60;
        d = 0;
        #60;
        
        clk = 1;
        rst = 0;
        d = 1;
        #60;


        
    end
      
    always #60 clk = ~clk;      
endmodule

-----------------------------------------------------------------------------
JKFF
------------------------------------------------------------

module jkff(
        j, k, clk, rst, q, qo
    );
    input j, k, clk, rst;
    
    output reg q;
    output qo;
    
    
    always @(posedge clk) 
    begin

       if (rst)
            q <= 0;
       else 
       begin
             if (j==0 && k==0)
                 q <= q;
            else if (j==0 && k==1)
                q <= 0;
            else if (j==1 && k==0)
                q <= 1;    
            else
                q <= ~q;     
       end     
          
    end
    assign qo = ~q;
endmodule

__________________________________________________________________________
TB
________________________________________________________
module jk_tb;
    reg j, k, rst, clk;
    wire q, qo;
    
    jkff uut(
        .j(j),
        .k(k),
        .rst(rst),
        .clk(clk),
        .q(q),
        .qo(qo)
    );
    initial begin
        clk = 1;
        forever #10 clk = ~clk;
    end
    initial begin
        rst=1;
        #20;
        rst=0;
        
        j = 0;
		k = 0;
		#20;
		
		j = 0;
		k = 1;
		rst = 0;#20;
		
		j = 1;
		k = 0;
		rst = 0;#20;
		
		j = 1;
		k = 1;
		rst = 0;#20;
		
		j = 0;
		k = 0;
		rst = 0;#20;
        
    end    
endmodule
_____________________________________________________________________


TFF

-----------------------------------------------------
module tff(
    t, clk, rst, q
    );
    input t, clk, rst;
    output reg q;

    always @(posedge clk)
    begin
        if (rst)
            q <= 0;
        else
            begin
                if (t)
                    q <= ~q;
                else
                    q <= q;    
            end    
    end

endmodule
-----------------------------------------------------

TB
________________________
module tff_tb;
    reg clk, rst, t;
    wire q;
    tff uut(
        .clk(clk),
        .rst(rst),
        .t(t),
        .q(q)
    );
//    initial begin
//        clk = 1;
//        forever #20 clk = ~clk;
//    end
    initial begin
t = 1;
		clk = 1;
		rst = 1;

		// Wait 100 ns for global reset to finish
		#100;
      t = 0;
		rst = 0;  
		// Add stimulus here
		#100;
      t = 1;
	   #100;
		t=0;
		end
always  #50  clk = ~clk;
endmodule

-----------------------------------------------------------


----------------
ALU
________________
module ALU(
        A, B,op, res
    );
    input [3:0] A, B, op;
    output [3:0] res;
    reg [3:0] res;
    
    always @(A, B, op)
    begin
        case(op)
            4'b0000: res = A + B;
            4'b0001: res = A - B;
            4'b0010: res = A * B;
            4'b0011: res = A / B;
            
            4'b0100: res = A << 1;
            4'b0101: res = A >> 1;
            
            4'b0110: res = A + B;
            4'b0111: res = B>A?1:0;
            4'b1000: res = A & B;
            4'b1001: res = A | B;
            4'b1010: res = A ^ B;
            4'b1011: res = ~A;
            4'b1100: res = ~(A | B);  // nor
            4'b1101: res = ~(A & B);
            4'b1110: res = ~(A ^ B);
            4'b1111: res = A>B?1:0;
        endcase
    end


___________________
TESTBENCH
___________________
module tb_alu;
    reg[3:0] A, B, op;
    wire[3:0] res;
    ALU uut(
        .A(A), 
        .B(B), 
        .op(op),
        .res(res)
    );
    initial begin
        A = 4'b0010;
        B = 4'b0101;
        op = 4'b0000;#30;
        op = 4'b0001;#30;
        op = 4'b0010;#30;
        op = 4'b0011;#30;
        op = 4'b0100;#30;
        op = 4'b0101;#30;
        op = 4'b0110;#30;
        op = 4'b0111;#30;
        op = 4'b1000;#30;
        op = 4'b1001;#30;
        op = 4'b1010;#30;
        op = 4'b1011;#30;
        op = 4'b1100;#30;
        op = 4'b1101;#30;
        op = 4'b1110;#30;
        op = 4'b1111;#30;
    end
endmodule


____________________________________________________________
UPDOWN COUNTER
___________________________________________________________
module up_down_counter( input clk, reset,up_down, output[3:0]  counter
    );
reg [3:0] counter_up_down;

// down counter
always @(posedge clk or posedge reset)
begin
if(reset)
 counter_up_down <= 4'h0;
else if(~up_down)
 counter_up_down <= counter_up_down + 4'd1;
else
 counter_up_down <= counter_up_down - 4'd1;
end 
assign counter = counter_up_down;
endmodule

----------------------------------
test bench******
________________________________



module updowncounter_testbench();
reg clk, reset,up_down;
wire [3:0] counter;

up_down_counter dut(clk, reset,up_down, counter);
initial begin 
clk=0;
forever #5 clk=~clk;
end
initial begin
reset=1;
up_down=0;
#20;
reset=0;
#200;
up_down=1;
end
endmodule



_________________________________

UPcounter without clock divider
_________________________________


module up_counter(input clk, reset, output[3:0] counter
    );
reg [3:0] counter_up;

// up counter
always @(posedge clk or posedge reset)
begin
if(reset)
 counter_up <= 4'd0;
else
 counter_up <= counter_up + 4'd1;
end 
assign counter = counter_up;
endmodule



******************************************
testbech
***************************************


module upcounter_testbench();
reg clk, reset;
wire [3:0] counter;

up_counter dut(clk, reset, counter);
initial begin 
clk=0;
forever #5 clk=~clk;
end
initial begin
reset=1;
#20;
reset=0;
end
endmodule 



_________________________________
4:1 mux gate level
______________________________


module mux(input a, b, c, d, so, s1, output out

    );
    
    wire w1, w2;
    wire ao, bo, co, do;
    
    not n1(w1, so);
    not n2(w2, s1);
    
    and a1(ao, w1, w2, a);
    and a2(bo, w1, s1, b);
    and a3(co, w2, so, c);
    and a4(do, so, s1, d);
    
    or b1(out, ao, bo, co, do);
    
    
    
endmodule
------------------------------------------------
TB
______________________________
module mux_tb;
    reg a,b,c,d,so,s1;
    wire out;
    mux uut(
        .a(a),
        .b(b),
        .c(c),
        .d(d),
        .so(so), 
        .s1(s1), 
        .out(out)
    );
    initial begin
    a = 1;
    b = 0;
    c = 0;
    d = 0;
    so = 0;
    s1 = 0;
    #100;
    
    a = 0;
    b = 1;
    c = 0;
    d = 0;
    so = 0;
    s1 = 1;
    #100;
    
    a = 0;
    b = 0;
    c = 1;
    d = 0;
    so = 1;
    s1 = 0;
    #100;
    
    a = 0;
    b = 0;
    c = 0;
    d = 1;
    so = 1;
    s1 = 1;
    #100;
    
    
    
    
    end
endmodule








